/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.gob.ceasonora.tonerManagement.gui.administrar.nuevo;

import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import mx.gob.ceasonora.tonerManagement.entidades.Herramienta;
import mx.gob.ceasonora.tonerManagement.entidades.Personal;
import mx.gob.ceasonora.tonerManagement.entidades.Prestamo;
import mx.gob.ceasonora.tonerManagement.enumeradores.Estado;
import mx.gob.ceasonora.tonerManagement.gui.Login;
import mx.gob.ceasonora.tonerManagement.implementaciones.HerramientaImp;
import mx.gob.ceasonora.tonerManagement.implementaciones.PersonalImp;
import mx.gob.ceasonora.tonerManagement.implementaciones.PrestamoImp;
import mx.gob.ceasonora.tonerManagement.instancias.InstanciaConexion;
import mx.gob.ceasonora.tonerManagement.interfaces.HerramientaInt;
import mx.gob.ceasonora.tonerManagement.interfaces.PersonalInt;
import mx.gob.ceasonora.tonerManagement.interfaces.PrestamoInt;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;



/**
 *
 * @author kevin
 */
public class NuevoPrestamo extends javax.swing.JInternalFrame {
    InstanciaConexion conexion = InstanciaConexion.getInstanciaConexion();
    HerramientaInt herImp = new HerramientaImp();
    PersonalInt perImp = new PersonalImp();
    PrestamoInt pmoImp = new PrestamoImp();
    
    DefaultTableModel modeloHer;
    DefaultTableModel modeloPer;
    String[] titulosHer = {"# Producto","Nombre","Descripcion","Cantidad Disponible"};
    String[] titulosPer = {"Nombre","Area","Puesto"};
    
    List<Herramienta> herramientas;
    List<Personal> listaPersonal;
  
    /**
     * Creates new form NuevoConsumible
     */
    public NuevoPrestamo() {
        initComponents();
        
        modeloHer = new DefaultTableModel();
        modeloPer = new DefaultTableModel();
        herramientasTable.setModel(modeloHer);
        personalTable.setModel(modeloPer);
        modeloHer.setColumnIdentifiers(titulosHer);
        modeloPer.setColumnIdentifiers(titulosPer);
        
        try {
            herramientas = herImp.lista_herramientas();
            for(Herramienta her : herramientas){
                Object[]o = new Object[4];
                o[0] = her.getCodigoProducto();
                o[1] = her.getNombre();
                o[2] = her.getDescripcion();
                o[3] = her.getCantidadDisponible();
                
                modeloHer.addRow(o);
            }
        } catch (Exception e) {
            System.out.println("Error al mostrar las herramientas en la tabla");
        }
        
        try {
            listaPersonal = perImp.lista_personal();
            for(Personal per : listaPersonal){
                Object[]o = new Object[3];
                o[0] = per.getNombre();
                o[1] = per.getArea();
                o[2] = per.getPuesto();
                
                modeloPer.addRow(o);
            }
        } catch (Exception e) {
            System.out.println("Error al mostrar el personal en la tabla");
        }
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        personalTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        herramientasTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        codigoProductoTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        nombreHerramientaTextField = new javax.swing.JTextField();
        mostrarHerramientasButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        nombrePersonalTextField = new javax.swing.JTextField();
        mostrarPersonalButton = new javax.swing.JButton();
        nuevoPersonalButton = new javax.swing.JButton();
        generarButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        fechaDevolucionDateChooser = new com.toedter.calendar.JDateChooser();

        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(51, 102, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nuevo Préstamo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(285, 285, 285)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        personalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Area", "Puesto"
            }
        ));
        jScrollPane1.setViewportView(personalTable);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Seleccione el Personal que solicita el préstamo:");

        herramientasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Producto", "Nombre", "Descripcion", "Cantidad Disponible"
            }
        ));
        jScrollPane2.setViewportView(herramientasTable);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Seleccione la Herramienta que se prestará:");

        jLabel2.setText("Buscar por # de Producto:");

        codigoProductoTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codigoProductoTextFieldKeyReleased(evt);
            }
        });

        jLabel5.setText("Buscar por Nombre:");

        nombreHerramientaTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreHerramientaTextFieldActionPerformed(evt);
            }
        });
        nombreHerramientaTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nombreHerramientaTextFieldKeyReleased(evt);
            }
        });

        mostrarHerramientasButton.setText("Mostrar Todos");
        mostrarHerramientasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarHerramientasButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Buscar por Nombre:");

        nombrePersonalTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nombrePersonalTextFieldKeyReleased(evt);
            }
        });

        mostrarPersonalButton.setText("Mostrar Todos");
        mostrarPersonalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarPersonalButtonActionPerformed(evt);
            }
        });

        nuevoPersonalButton.setText("Nuevo Personal");
        nuevoPersonalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoPersonalButtonActionPerformed(evt);
            }
        });

        generarButton.setText("Generar Préstamo");
        generarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Fecha de Devolución:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mostrarHerramientasButton)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(codigoProductoTextField)
                                        .addComponent(nombreHerramientaTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)))))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(mostrarPersonalButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(nuevoPersonalButton))
                                            .addComponent(nombrePersonalTextField))))
                                .addGap(57, 57, 57))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(generarButton)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(270, 270, 270)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fechaDevolucionDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(codigoProductoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(nombrePersonalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(nombreHerramientaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(mostrarHerramientasButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mostrarPersonalButton)
                            .addComponent(nuevoPersonalButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(fechaDevolucionDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generarButton))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codigoProductoTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoProductoTextFieldKeyReleased

       modeloHer.setRowCount(0);
        try {
            herramientas = herImp.buscar_codigo(codigoProductoTextField.getText());
            for(Herramienta her : herramientas){
                Object[]o = new Object[4];
                o[0] = her.getCodigoProducto();
                o[1] = her.getNombre();
                o[2] = her.getDescripcion();
                o[3] = her.getCantidadDisponible();
                
                modeloHer.addRow(o);
            }
            
        } catch (Exception e) {
            System.out.println("Error al mostrar las herramientas en la tabla");
        }
        
    }//GEN-LAST:event_codigoProductoTextFieldKeyReleased

    private void nombreHerramientaTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreHerramientaTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreHerramientaTextFieldActionPerformed

    private void nombreHerramientaTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreHerramientaTextFieldKeyReleased

        modeloHer.setRowCount(0);
        try {
            herramientas = herImp.buscar_nombre(nombreHerramientaTextField.getText());
            for(Herramienta her : herramientas){
                Object[]o = new Object[4];
                o[0] = her.getCodigoProducto();
                o[1] = her.getNombre();
                o[2] = her.getDescripcion();
                o[3] = her.getCantidadDisponible();
                
                modeloHer.addRow(o);
            }
            
        } catch (Exception e) {
            System.out.println("Error al mostrar las herramientas en la tabla");
        }
        
    }//GEN-LAST:event_nombreHerramientaTextFieldKeyReleased

    private void mostrarHerramientasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarHerramientasButtonActionPerformed

       modeloHer.setRowCount(0);
        try {
            herramientas = herImp.lista_herramientas();
            for(Herramienta her : herramientas){
                Object[]o = new Object[4];
                o[0] = her.getCodigoProducto();
                o[1] = her.getNombre();
                o[2] = her.getDescripcion();
                o[3] = her.getCantidadDisponible();
                
                modeloHer.addRow(o);
            }
            
        } catch (Exception e) {
            System.out.println("Error al mostrar las herramientas en la tabla");
        }
        
    }//GEN-LAST:event_mostrarHerramientasButtonActionPerformed

    private void nombrePersonalTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombrePersonalTextFieldKeyReleased

       modeloPer.setRowCount(0);
        try {
            listaPersonal = perImp.buscar_nombre(nombrePersonalTextField.getText());
            
            for(Personal per : listaPersonal){
                Object[]o = new Object[3];
                o[0] = per.getNombre();
                o[1] = per.getArea();
                o[2] = per.getPuesto();

                modeloPer.addRow(o);
            }
        } catch (Exception e) {
            System.out.println("Error al mostrar el personal en la tabla");
        }

    }//GEN-LAST:event_nombrePersonalTextFieldKeyReleased

    private void mostrarPersonalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarPersonalButtonActionPerformed

        modeloPer.setRowCount(0);
        try {
            listaPersonal = perImp.lista_personal();

            for (Personal per : listaPersonal) {
                Object[] o = new Object[3];
                o[0] = per.getNombre();
                o[1] = per.getArea();
                o[2] = per.getPuesto();

                modeloPer.addRow(o);
            }
        } catch (Exception e) {
            System.out.println("Error al mostrar el personal en la tabla");
        }

    }//GEN-LAST:event_mostrarPersonalButtonActionPerformed

    private void nuevoPersonalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoPersonalButtonActionPerformed

        NuevoPersonal nuevoPersonal = new NuevoPersonal();
        JDesktopPane escritorio = getDesktopPane();
        escritorio.add(nuevoPersonal);
        nuevoPersonal.setVisible(true);

    }//GEN-LAST:event_nuevoPersonalButtonActionPerformed

    private void generarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarButtonActionPerformed

        if (!herramientasTable.getSelectionModel().isSelectionEmpty() && !personalTable.getSelectionModel().isSelectionEmpty() && fechaDevolucionDateChooser.getDate() != null) {
            Herramienta her = herramientas.get(herramientasTable.getSelectedRow());
            Personal per = listaPersonal.get(personalTable.getSelectedRow());

            try {
                if (!pmoImp.noDevueltos_idPersonal(per.getId()).isEmpty()) {
                    if (JOptionPane.showConfirmDialog(null, "La persona seleccionada tiene préstamos pendientes o atrasados, ¿Desea continuar con el préstamo?", "Personal con préstamos no devueltos", JOptionPane.YES_NO_OPTION) == 0) {
                        if (her.getCantidadDisponible() > 0) {
                            int cantidadRestante = her.getCantidadDisponible() - 1;
                            try {
                                her.setCantidadDisponible(cantidadRestante);
                                Prestamo prestamo = new Prestamo();
                                prestamo.setEstado(Estado.PENDIENTE);
                                prestamo.setFechaPrestamo(new Date());
                                Date fechaRegreso = fechaDevolucionDateChooser.getDate();
                                Calendar cal = Calendar.getInstance();
                                cal.setTime(fechaRegreso);
                                cal.add(Calendar.HOUR_OF_DAY, 23);
                                cal.add(Calendar.MINUTE, 59);
                                cal.add(Calendar.SECOND, 00);
                                fechaRegreso.setTime(cal.getTimeInMillis());
                                prestamo.setFechaRegreso(fechaRegreso);
                                prestamo.setHerramienta(her);
                                prestamo.setPersonal(per);
                                prestamo.setUsuario(Login.usuario);

                                if (pmoImp.Agregar(prestamo)) {
                                    JOptionPane.showMessageDialog(null, "Prestamo generado con éxito", "Préstamo Generado", JOptionPane.INFORMATION_MESSAGE);
                                    herImp.Editar(her, her);

                                    try {
                                        JDialog espera = new JDialog();
                                        espera.setLocationRelativeTo(null);
                                        espera.setTitle("Generando reporte...");
                                        espera.pack();
                                        espera.setVisible(true);

                                        List<Prestamo> lista = pmoImp.lista_prestamos();
                                        HashMap parametros = new HashMap();
                                        parametros.put("idPrestamo", lista.get(lista.size() - 1).getId());

                                        conexion.conexion();
                                        JasperPrint jp = JasperFillManager.fillReport("src\\reporte\\reporte_prestamo.jasper", parametros, conexion.con);
                                        JasperViewer.viewReport(jp, false);
                                        espera.setVisible(false);

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }

                                    this.dispose();
                                }
                            } catch (Exception e) {
                                System.out.println("Error al registrar el préstamo");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "No se cuenta con existencias de la Herramienta seleccionada", "Herramienta ocupada", JOptionPane.ERROR_MESSAGE);

                        }
                    }
                } else if (her.getCantidadDisponible() > 0) {
                    int cantidadRestante = her.getCantidadDisponible() - 1;
                    try {
                        her.setCantidadDisponible(cantidadRestante);
                        Prestamo prestamo = new Prestamo();
                        prestamo.setEstado(Estado.PENDIENTE);
                        prestamo.setFechaPrestamo(new Date());
                        Date fechaRegreso = fechaDevolucionDateChooser.getDate();
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(fechaRegreso);
                        cal.add(Calendar.HOUR_OF_DAY, 23);
                        cal.add(Calendar.MINUTE, 59);
                        cal.add(Calendar.SECOND, 59);
                        fechaRegreso.setTime(cal.getTimeInMillis());
                        prestamo.setFechaRegreso(fechaRegreso);
                        prestamo.setHerramienta(her);
                        prestamo.setPersonal(per);
                        prestamo.setUsuario(Login.usuario);

                        if (pmoImp.Agregar(prestamo)) {
                            JOptionPane.showMessageDialog(null, "Prestamo generado con éxito", "Préstamo Generado", JOptionPane.INFORMATION_MESSAGE);
                            herImp.Editar(her, her);

                            try {
                                JDialog espera = new JDialog();
                                espera.setLocationRelativeTo(null);
                                espera.setTitle("Generando reporte...");
                                espera.pack();
                                espera.setVisible(true);

                                List<Prestamo> lista = pmoImp.lista_prestamos();
                                HashMap parametros = new HashMap();
                                parametros.put("idPrestamo", lista.get(lista.size() - 1).getId());

                                conexion.conexion();
                                JasperPrint jp = JasperFillManager.fillReport("src\\reporte\\reporte_prestamo.jasper", parametros, conexion.con);
                                JasperViewer.viewReport(jp, false);
                                espera.setVisible(false);

                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            this.dispose();
                        }
                    } catch (Exception e) {
                        System.out.println("Error al registrar el préstamo");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No se cuenta con existencias de la Herramienta seleccionada", "Herramienta ocupada", JOptionPane.ERROR_MESSAGE);

                }
            } catch (SQLException ex) {
                Logger.getLogger(NuevoPrestamo.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado Personal, Herramienta o no se ha fijado la Fecha de Devolución", "No se puede generar prestamo", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_generarButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField codigoProductoTextField;
    private com.toedter.calendar.JDateChooser fechaDevolucionDateChooser;
    private javax.swing.JButton generarButton;
    private javax.swing.JTable herramientasTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mostrarHerramientasButton;
    private javax.swing.JButton mostrarPersonalButton;
    private javax.swing.JTextField nombreHerramientaTextField;
    private javax.swing.JTextField nombrePersonalTextField;
    private javax.swing.JButton nuevoPersonalButton;
    private javax.swing.JTable personalTable;
    // End of variables declaration//GEN-END:variables
}
